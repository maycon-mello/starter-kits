{"version":3,"sources":["webpack:///webpack/bootstrap 451822f4b75cc688a61b","webpack:///./src/server/index.js","webpack:///external \"express\"","webpack:///./src/server/data/schema.js","webpack:///external \"graphql\"","webpack:///external \"graphql-relay\"","webpack:///external \"express-graphql\""],"names":[],"mappings":";;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;oCCtCoB,CAAS;;;;uCACN,CAAe;;2CACd,CAAiB;;;;AAEzC,KAAM,GAAG,GAAG,2BAAS,CAAC;;;AAGtB,IAAG,CAAC,GAAG,CAAC,GAAG,EAAE,iCAAY;AACrB,SAAM,oBAAQ;AACd,SAAM,EAAE,IAAI;AACZ,WAAQ,EAAE,IAAI;EACf,CAAC,CACH,CAAC;AACF,IAAG,CAAC,MAAM,CAAC,IAAI,EAAE,UAAC,GAAG,EAAK;AACxB,OAAI,GAAG,EAAE;AACP,YAAO,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC3B;AACD,UAAO,CAAC,GAAG,CAAC,iDAAiD,CAAC,CAAC;EAChE,CAAC,C;;;;;;AClBF,qC;;;;;;;;;;;;;;oCCOO,CAAS;;;;yCAOT,CAAe;;AAEtB,KAAM,OAAO,GAAG;AACd,KAAE,EAAE,EAAE;AACN,OAAI,EAAE,eAAe;EACtB,CAAC;;;;;;;;;;;;;;;;;wBAiBiC,mCACjC,UAAC,QAAQ,EAAK;uBACO,gCAAa,QAAQ,CAAC;;OAAnC,EAAE,iBAAF,EAAE;OAAE,IAAI,iBAAJ,IAAI;;;;AAGd,OAAI,IAAI,KAAK,SAAS,EACpB,OAAO,OAAO,CAAC;AACjB,UAAO,IAAI,CAAC;EACb,EACD,UAAC,GAAG,EAAK;AACP,UAAO,WAAW,CAAC;EACpB,CACF;;KAZK,aAAa,oBAAb,aAAa;KAAE,SAAS,oBAAT,SAAS;;;;AAgB9B,KAAI,WAAW,GAAG,+BAAsB;;AAEtC,OAAI,EAAE,SAAS;AACf,SAAM,EAAE;YAAO;AACb,SAAE,EAAE,iCAAc,SAAS,CAAC;AAC5B,WAAI,EAAE;AACJ,aAAI,wBAAe;AACnB,oBAAW,EAAE,aAAa;QAC3B;MACF;IAAC;AACF,aAAU,EAAE,CAAE,aAAa,CAAE;EAC9B,CAAC,CAAC;;AAEH,KAAI,SAAS,GAAG,+BAAsB;AACpC,OAAI,EAAE,OAAO;AACb,SAAM,EAAE;YAAO;AACb,WAAI,EAAE,SAAS;AACf,cAAO,EAAE;AACP,aAAI,EAAE,WAAW;AACjB,gBAAO,EAAE;kBAAM,OAAO;UAAA;QACvB;MACF;IAAC;EACH,CAAC,CAAC;;AAEI,KAAI,MAAM,GAAG,2BAAkB;AACpC,QAAK,EAAE,SAAS;EACjB,CAAC,CAAC;;;;;;;AC9EH,qC;;;;;;ACAA,2C;;;;;;ACAA,6C","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 451822f4b75cc688a61b\n **/","import express from 'express';\nimport { Schema } from './data/schema';\nimport graphQLHTTP from 'express-graphql';\n\nconst app = express();\n// We respond to all GraphQL requests from `/graphql` using the\n// `express-graphql` middleware, which we pass our schema to.\napp.use('/', graphQLHTTP({\n    schema: Schema,\n    pretty: true,\n    graphyql: true,\n  })\n);\napp.listen(8080, (err) => {\n  if (err) {\n    return console.error(err);\n  }\n  console.log('GraphQL Server is now running on localhost:8080');\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/server/index.js\n **/","module.exports = require(\"express\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"express\"\n ** module id = 1\n ** module chunks = 0\n **/","// This module exports a GraphQL Schema, which is a declaration of all the\n// types, queries and mutations we'll use in our system.\nimport {\n  GraphQLObjectType,\n  GraphQLInt,\n  GraphQLString,\n  GraphQLSchema\n} from 'graphql';\n\n// Relay adds some specific types that it needs to function, including Node, Edge, Connection\nimport {\n  fromGlobalId,\n  globalIdField,\n  nodeDefinitions\n} from 'graphql-relay';\n\nconst example = {\n  id: 25,\n  text: 'Text returned'\n};\n\n// Firstly we need to create the Node interface in our system. This has nothing\n// to do with Node.js! In Relay, Node refers to an entity – that is, an object\n// with an ID.\n\n// To create this interface, we need to pass in a resolving function as the\n// first arg to nodeDefinitions that can fetch an entity given a global Relay\n// ID. The second arg can be used to resolve an entity into a GraphQL type –\n// but it's actually optional, so we'll leave it out and use isTypeOf on the\n// GraphQL types further below.\n\n\n/**\n * The first argument defines the way to resolve an ID to its object.\n * The second argument defines the way to resolve a node object to its GraphQL type.\n */\nvar { nodeInterface, nodeField } = nodeDefinitions(\n  (globalId) => {\n    let { id, type } = fromGlobalId(globalId);\n    // This attribute  doesn't need to be equals Example class\n    // Just need to match with exampleType name\n    if (type === 'Example')\n      return example;\n    return null;\n  },\n  (obj) => {\n    return exampleType;\n  }\n);\n\n// We can now use the Node interface in the GraphQL types of our schema\n// Creating a exampleType\nvar exampleType = new GraphQLObjectType({\n  // need to mach with interface conditions above \"if (type === 'Example') {\"\n  name: 'Example',\n  fields: () => ({\n    id: globalIdField('Example'),\n    text: {\n      type: GraphQLString,\n      description: 'Hello World'\n    }\n  }),\n  interfaces: [ nodeInterface ]\n});\n\nvar queryType = new GraphQLObjectType({\n  name: 'Query',\n  fields: () => ({\n    node: nodeField,\n    example: {\n      type: exampleType,\n      resolve: () => example\n    }\n  })\n});\n\nexport var Schema = new GraphQLSchema({\n  query: queryType\n});\n\n\n/** WEBPACK FOOTER **\n ** ./src/server/data/schema.js\n **/","module.exports = require(\"graphql\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"graphql\"\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = require(\"graphql-relay\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"graphql-relay\"\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = require(\"express-graphql\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"express-graphql\"\n ** module id = 5\n ** module chunks = 0\n **/"],"sourceRoot":""}